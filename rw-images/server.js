 /******************************************************
 * PLEASE DO NOT EDIT THIS FILE
 * the verification process may break
 * ***************************************************/

'use strict';

var fs = require('fs');
var express = require('express');
var app = express();
var https=require('https');

var mongodb = require('mongodb');
//We need to work with "MongoClient" interface in order to connect to a mongodb server.
var MongoClient = mongodb.MongoClient;

var url=process.env.MONGO_URL
var kluczAPI=process.env.KLUCZ_API
var cx=process.env.CX
var maxShortUrl=0;

if (!process.env.DISABLE_XORIGIN) {
  app.use(function(req, res, next) {
    var allowedOrigins = ['https://narrow-plane.gomix.me', 'https://www.freecodecamp.com'];
    var origin = req.headers.origin || '*';
    if(!process.env.XORIG_RESTRICT || allowedOrigins.indexOf(origin) > -1){
         console.log(origin);
         res.setHeader('Access-Control-Allow-Origin', origin);
         res.header("Access-Control-Allow-Headers", "Origin, X-Requested-With, Content-Type, Accept");
    }
    next();
  });
}

app.use('/public', express.static(process.cwd() + '/public'));

app.use('/api/imagesearch', function(req, res, next){

  var searchDetails=req.query.q;
  storeNextSearch(searchDetails, function(err, doc){
  })
  var num=req.query.num || 10;
  var urlSearch='https://www.googleapis.com/customsearch/v1?'+'q='+searchDetails+'&cx='+cx+'&num='+num+'&searchType=image&key='+kluczAPI

  googleSearch(urlSearch, function(data){
    if(data){
      res.send(data)
    } else {
      res.send({"message": "no data"})
    }
  })
})

app.get('/api/latest/imagesearch', function (req, res) {
  getRecentSearch(function(docs){
    res.type('json').send(docs);;
  })
});

app.route('/')
    .get(function(req, res) {
		  res.sendFile(process.cwd() + '/views/index.html');
    })
// Respond not found to all the wrong routes
app.use(function(req, res, next){
  res.status(404);
  res.type('txt').send('404. Not found');
});

// Error Middleware
app.use(function(err, req, res, next) {
  if(err) {
    res.status(err.status || 500)
      .type('txt')
      .send(err.message || 'SERVER ERROR');
  }
})

app.listen(process.env.PORT||3000, function () {
  console.log('Node.js listening ...');
});

function googleSearch(urlSearch, callback){
  https.get(urlSearch, (data)=>{
//    console.log('statusCode ',data.statusCode)
//    console.log('headers ', data.headers)
    let rawData='';
    data.on('data', (chunk)=>{rawData+=chunk})
    data.on('end', ()=>{
      try{
        const parsedData=JSON.parse(rawData);
        let result=[];
        parsedData.items.forEach(function(x){
          result.push({"url": x.link, "snippet": x.snippet,
          "thumbnail": x.image.thumbnailLink, "context": x.image.contextLink})
        });
        callback(result)
      } catch (e){
        console.log(e.message)
        callback(null)
      }
    })
  }).on('error', (e)=>{
    callback(null);
  })
}


var storeNextSearch=function(searchDetails, callback){
  // Use connect method to connect to the Server
    var term = searchDetails, when=new Date();
    MongoClient.connect(url, function (err, db) {
    if (err) {
      console.log('Unable to connect to the mongoDB server. Error:', err);
    } else {
      console.log('Store: Connection established to', url);
      // do some work here with the database.
      var resentSeachColl=db.collection('imagesRecentSearch');
      resentSeachColl.insertOne({term: term, when: when}, function(err, doc){
        db.close();
        callback(doc);
      });
    }
    })
}

var getRecentSearch=function(callback){
  MongoClient.connect(url, function (err, db) {
    if (err) {
      console.log('Unable to connect to the mongoDB server. Error:', err);
    } else {
      console.log('FindDoc: Connection established to', url);
      var coll=db.collection('imagesRecentSearch');
      coll.find().toArray(function(err, docs){
        db.close();
        callback(docs);
      })}
    })
};
