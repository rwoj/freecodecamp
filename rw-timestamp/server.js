 /******************************************************
 * PLEASE DO NOT EDIT THIS FILE
 * the verification process may break
 * ***************************************************/

'use strict';

var fs = require('fs');
var express = require('express');
var app = express();

if (!process.env.DISABLE_XORIGIN) {
  app.use(function(req, res, next) {
    var allowedOrigins = ['https://narrow-plane.gomix.me', 'https://www.freecodecamp.com'];
    var origin = req.headers.origin || '*';
    if(!process.env.XORIG_RESTRICT || allowedOrigins.indexOf(origin) > -1){
         console.log(origin);
         res.setHeader('Access-Control-Allow-Origin', origin);
         res.header("Access-Control-Allow-Headers", "Origin, X-Requested-With, Content-Type, Accept");
    }
    next();
  });
}

app.use('/public', express.static(process.cwd() + '/public'));

app.route('/_api/package.json')
  .get(function(req, res, next) {
    console.log('requested');
    fs.readFile(__dirname + '/package.json', function(err, data) {
      if(err) return next(err);
      res.type('txt').send(data.toString());
    });
  });

app.route('/')
    .get(function(req, res) {
		  res.sendFile(process.cwd() + '/views/index.html');
    })
// timestamp microservice
app.route('/:arg')
  .get(function(req,res){
    var date=req.params.arg;
    var result=prepareDateResponse(date);
 //   console.log(date, result);
    res.type('json').send(result);
  })


// Respond not found to all the wrong routes
app.use(function(req, res, next){
  res.status(404);
  res.type('txt').send('Not found');
});

// Error Middleware
app.use(function(err, req, res, next) {
  if(err) {
    res.status(err.status || 500)
      .type('txt')
      .send(err.message || 'SERVER ERROR');
  }
})

app.listen(process.env.PORT || 3000, function () {
  console.log('Node.js listening ...');
});

function prepareDateResponse(date){
  var months=["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sept", "Oct", "Nov", "Dec"]
  var natDate=null, 
      unixDate=null;
  if(isNaN(date)){
    natDate=Date.parse(date);
    if (!natDate){
      natDate=null;
    } else {
      unixDate=natDate/1000;
      natDate=new Date(natDate);
      natDate=" "+months[natDate.getMonth()]+" "+natDate.getDate()+", "+natDate.getFullYear()+" ";
    }
  } else {
    unixDate=parseInt(date);
    natDate=new Date(unixDate*1000);
    natDate=" "+months[natDate.getMonth()]+" "+natDate.getDate()+", "+natDate.getFullYear()+" ";
  }
  
  return {"unix":unixDate, "natural": natDate};
}