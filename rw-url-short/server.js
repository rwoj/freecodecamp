 /******************************************************
 * PLEASE DO NOT EDIT THIS FILE
 * the verification process may break
 * ***************************************************/

'use strict';

var fs = require('fs');
var express = require('express');
var app = express();

var mongodb = require('mongodb');
//We need to work with "MongoClient" interface in order to connect to a mongodb server.
var MongoClient = mongodb.MongoClient;
// Connection URL. This is where your mongodb server is running.
//(Focus on This Variable)
var url = process.env.MONGO_DB;

//(Focus on This Variable)
var maxShortUrl=0;

if (!process.env.DISABLE_XORIGIN) {
  app.use(function(req, res, next) {
    var allowedOrigins = ['https://narrow-plane.gomix.me', 'https://www.freecodecamp.com'];
    var origin = req.headers.origin || '*';
    if(!process.env.XORIG_RESTRICT || allowedOrigins.indexOf(origin) > -1){
         console.log(origin);
         res.setHeader('Access-Control-Allow-Origin', origin);
         res.header("Access-Control-Allow-Headers", "Origin, X-Requested-With, Content-Type, Accept");
    }
    next();
  });
}

app.use('/public', express.static(process.cwd() + '/public'));

app.use('/new',function(req, res) {
    var fullUrl=req.path.slice(1);
    console.log(fullUrl)
// check if exist, nextmax, then store
    storeNewShortUrl(fullUrl, function(doc){
      res.type('json').send(doc)
    });
  });
app.route('/:arg')
  .get(function(req, res) {
    var shortUrl=req.params.arg;
// check if exist, then redirect, else not exist
    findDoc(shortUrl, function(doc){
      if (doc.original_url) {
        console.log(JSON.stringify(doc.original_url))
        res.redirect(doc.original_url);
//        res.type('text').send('heja'+doc.short_url);
      } else{
        res.type('text').send('Short URL does not exist. You need to create it first.')
      }
    })
  });
app.route('/')
    .get(function(req, res) {
		  res.sendFile(process.cwd() + '/views/index.html');
    })
// Respond not found to all the wrong routes
app.use(function(req, res, next){
  res.status(404);
  res.type('txt').send('404. Not found');
});

// Error Middleware
app.use(function(err, req, res, next) {
  if(err) {
    res.status(err.status || 500)
      .type('txt')
      .send(err.message || 'SERVER ERROR');
  }
})

app.listen(process.env.PORT||3000, function () {
  console.log('Node.js listening ...');
  getMaxShortUrl(function(doc){
    maxShortUrl=doc.maxShortUrl;
  });
});

var storeNewShortUrl=function(fullUrl, callback){
  maxShortUrl++;
  var addedDoc={original_url: fullUrl, short_url: maxShortUrl}
  // Use connect method to connect to the Server
    MongoClient.connect(url, function (err, db) {
    if (err) {
      console.log('Unable to connect to the mongoDB server. Error:', err);
    } else {
      console.log('Store: Connection established to', url);
      // do some work here with the database.
      var maxColl=db.collection('urlShortMax');
      maxColl.updateOne({}, {$set:{maxShortUrl:maxShortUrl}});

      var coll=db.collection('urlShort');
// could first verify if exists -- for future dev

// insert doc
      coll.insertOne(addedDoc, function(err, res){
        if(err){
          db.close();
          callback(null);
        }
        console.log('added doc'+ JSON.stringify(addedDoc))
        db.close();
        callback(addedDoc);
      })
    }
  });
}

var findDoc=function(shortUrl, callback){
  MongoClient.connect(url, function (err, db) {
    if (err) {
      console.log('Unable to connect to the mongoDB server. Error:', err);
    } else {
      console.log('FindDoc: Connection established to', url);
      var coll=db.collection('urlShort');
      var short=Number(shortUrl)
      coll.findOne({short_url: short}, function(err, doc){
        db.close();
        callback(doc);
      })}
    })
};

var getMaxShortUrl = function(callback){
  MongoClient.connect(url, function (err, db) {
    if (err) {
      console.log('Unable to connect to the mongoDB server. Error:', err);
    } else {
      console.log('getMax: Connection established to', url);
      var coll=db.collection('urlShortMax');
      coll.findOne({}, function(err, doc){
        db.close();
        callback(doc);
      })}
    })
};
